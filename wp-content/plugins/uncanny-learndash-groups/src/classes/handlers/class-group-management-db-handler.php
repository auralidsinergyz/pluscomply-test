<?php


namespace uncanny_learndash_groups;

/**
 * Class Group_Management_DB_Handler
 *
 * @package uncanny_learndash_groups
 */
class Group_Management_DB_Handler {
	/**
	 * @var
	 */
	public static $instance;

	/**
	 * @var Group_Management_Seat_Handler
	 */
	public $seat;
	/**
	 * @var Woocommerce_Handlers
	 */
	public $woocommerce;
	/**
	 * @var Group_Management_Pages
	 */
	public $pages;
	/**
	 * @var string
	 */
	static $code_group_id_meta_key = '_ulgm_code_group_id';
	/**
	 * @var string
	 */
	static $license_meta_field = '_ulgm_license';
	/**
	 * @var string
	 */
	static $group_name_field = '_ulgm_group_name';
	/**
	 * @var string
	 */
	static $course_meta_field = '_ulgm_course';
	/**
	 * @var string
	 */
	static $db_group_tbl = '';
	/**
	 * @var string
	 */
	static $db_group_codes_tbl = '';

	/**
	 * @return Group_Management_DB_Handler
	 */
	public static function get_instance() {

		if ( null === self::$instance ) {
			self::$instance = new self();
		}

		return self::$instance;
	}

	/**
	 * Group_Management_DB_Handler constructor.
	 */
	public function __construct() {

		self::$db_group_tbl       = ulgm()->db->tbl_group_details;
		self::$db_group_codes_tbl = ulgm()->db->tbl_group_codes;

		include_once __DIR__ . '/class-group-management-pages.php';
		$this->pages = Group_Management_Pages::get_instance();

		include_once __DIR__ . '/class-gm-seat-handler.php';
		$this->seat = Group_Management_Seat_Handler::get_instance();

		include_once __DIR__ . '/class-woocommerce-handlers.php';
		$this->woocommerce = Woocommerce_Handlers::get_instance();
	}

	/**
	 * @param $qty
	 *
	 * @return array
	 * @since 1.0
	 * @version 4.0 Dropped DB check calls since the string is always going to be unique
	 */
	public function generate_random_codes( $qty ) {
		$codes  = array();
		$i      = 0;
		$prefix = apply_filters( 'ulgm_key_prefix', '' );
		$suffix = apply_filters( 'ulgm_key_suffix', '' );
		while ( $i < $qty ) {
			$random_code = $this->random_string();
			if ( ! isset( $codes[ $random_code ] ) ) {
				$codes[] = sprintf( '%s%s%s', $prefix, $random_code, $suffix );
			}
			$i ++;
		}

		return $codes;
	}

	/**
	 * @return string
	 * @since 1.0
	 * @version 4.0 random string is now generated by wp_create_nonce()
	 */
	public function random_string() {
		$random = wp_rand( 1000, 987654321 );
		$string = $random + time() + $random;
		$key    = wp_create_nonce( $string );

		return $this->enforce_alpha_numeric_ten_characters( $key );
	}

	/**
	 * Make sure that the length is at least 10 and the contains alphanumeric characters
	 *
	 * @param $key
	 *
	 * @return mixed
	 */
	public function enforce_alpha_numeric_ten_characters( $key ) {
		// $key is not 10 characters long
		if ( strlen( $key ) < 10 ) {
			return $this->enforce_alpha_numeric_ten_characters( $this->random_string() );
		}

		// $key is all digits
		if ( ctype_digit( $key ) ) {
			return $this->enforce_alpha_numeric_ten_characters( $this->random_string() );
		}

		return $key;
	}

	/**
	 * @param $attr
	 *
	 * @return int
	 */
	public function add_code_group( $attr ) {
		global $wpdb;
		if ( ! ulgm()->db->if_table_exists( ulgm()->db->tbl_group_details ) ) {
			ulgm()->db->create_tables();
		}

		$insert = array(
			'user_id'     => absint( $attr['user_id'] ),
			'order_id'    => absint( $attr['order_id'] ),
			'ld_group_id' => absint( $attr['group_id'] ),
			'group_name'  => $attr['group_name'],
			'issue_date'  => current_time( 'mysql' ),
		);

		$wpdb->insert(
			$wpdb->prefix . ulgm()->db->tbl_group_details,
			$insert,
			array(
				'%d',
				'%d',
				'%d',
				'%s',
				'%s',
			)
		);

		$code_group_id = $wpdb->insert_id;

		do_action( 'ulgm_code_group_created', $code_group_id, $attr );

		return $code_group_id;
	}


	/**
	 * @param $attr
	 * @param $codes
	 * @param null $code_group_id
	 *
	 * @return int|mixed|null
	 */
	public function add_codes( $attr, $codes, $code_group_id = null ) {

		if ( ! ulgm()->db->if_table_exists( ulgm()->db->tbl_group_codes ) ) {
			ulgm()->db->create_tables();
		}

		if ( null === $code_group_id ) {
			$code_group_id = $this->add_code_group( $attr );
		}

		if ( empty( $codes ) ) {
			// no codes found.
			return $code_group_id;
		}
		global $wpdb;

		$chunk = 1001;

		if ( count( $codes ) > $chunk ) {
			$chunks = array_chunk( $codes, $chunk );
			if ( $chunks ) {
				$add_codes = array();
				foreach ( $chunks as $chunk ) {
					if ( is_array( $chunk ) ) {
						foreach ( $chunk as $co ) {
							$add_codes[] = '(' . absint( $code_group_id ) . " ,'$co', '" . SharedFunctions::$available_status . "' )";
						}
					} else {
						$add_codes[] = '(' . absint( $code_group_id ) . " ,'$chunk')";
					}
				}
				if ( $add_codes ) {
					$wpdb->query( "INSERT INTO $wpdb->prefix" . ulgm()->db->tbl_group_codes . ' (`group_id`, `code`, `code_status`) VALUES ' . implode( ',', $add_codes ) );
				}
			}
		} else {
			$add_codes = array();
			if ( $codes ) {
				foreach ( $codes as $chunk ) {
					$add_codes[] = '(' . absint( $code_group_id ) . ",'$chunk', '" . SharedFunctions::$available_status . "' )";
				}
				if ( $add_codes ) {
					$wpdb->query( "INSERT INTO $wpdb->prefix" . ulgm()->db->tbl_group_codes . ' (`group_id`, `code`, `code_status`) VALUES ' . implode( ',', $add_codes ) );
				}
			}
		}

		do_action( 'ulgm_keys_added_to_group', $attr, $codes, $code_group_id );

		return $code_group_id;
	}

	/**
	 * @param $attr
	 * @param $codes
	 *
	 * @return bool|int
	 */
	public function add_additional_codes( $attr, $codes ) {
		global $wpdb;
		$code_group_id = absint( $attr['code_group_id'] );

		$table = $wpdb->prefix . ulgm()->db->tbl_group_codes;

		$codes_q = "INSERT INTO $table ( `group_id`, `code`, `code_status` ) VALUES ";

		$group_id = absint( $code_group_id );
		for ( $i = 0; $i < $attr['qty']; $i ++ ) {
			$code    = $codes[ $i ];
			$codes_q .= "( $group_id, '$code', '" . SharedFunctions::$available_status . "' ),";
		}

		$q = rtrim( $codes_q, ',' );

		$r = $wpdb->query( $q );

		$count = count( $codes );

		$ld_group_id = ulgm()->group_management->ld_group_id_from_code_group_id( $code_group_id );

		do_action( 'ulgm_seats_added', $count, $ld_group_id, $code_group_id, $attr, $codes );

		return $r;
	}

	/**
	 * @return int
	 */
	public function get_random_order_number() {

		$order_id = rand( 333333, 9999999 );
		//Confirm if the order is a duplicate number
		global $wpdb;
		$result = $wpdb->get_var( $wpdb->prepare( "SELECT order_id FROM $wpdb->prefix" . ulgm()->db->tbl_group_details . ' WHERE order_id = %d', $order_id ) );
		//return new order id if not a duplicate
		if ( empty( $result ) ) {
			return (int) $order_id;
		}
		//return to function to get a new number
		$this->get_random_order_number();
	}

	/**
	 * @param $code
	 *
	 * @return false|string
	 */
	public function get_codes_group_id_from_code( $code ) {
		if ( empty( $code ) ) {
			return false;
		}

		global $wpdb;
		$prepare = $wpdb->prepare( "SELECT group_id FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . ' WHERE code = %s', $code );

		return $wpdb->get_var( $prepare );
	}


	/**
	 * @param $code
	 * @param $group_id
	 *
	 * @return array|false|object|void|null
	 */
	public function get_details_by_code( $code, $group_id ) {

		global $wpdb;
		$codes_group_id = $this->seat->get_code_group_id( $group_id );
		if ( empty( $codes_group_id ) ) {
			return false;
		}
		$code = trim( esc_attr( $code ) );

		return $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE code LIKE %s AND group_id = %d', $code, $codes_group_id ) );
	}


	/**
	 * @param null $ld_group_id
	 * @param string $status
	 *
	 * @return false|string|null
	 */
	public function get_order_id_from_group_id( $ld_group_id = null, $status = 'wc-completed' ) {

		if ( null === $ld_group_id ) {
			return false;
		}

		if ( 'groups' !== get_post_type( $ld_group_id ) ) {
			return false;
		}

		global $wpdb;

		return $wpdb->get_var( $wpdb->prepare( "SELECT order_id FROM $wpdb->prefix" . ulgm()->db->tbl_group_details . ' WHERE ld_group_id = %d', $ld_group_id ) );
	}

	/**
	 * @param null $code
	 *
	 * @return bool
	 */
	public function sign_up_code_available( $code = null ) {
		if ( empty( $code ) ) {
			return false;
		}

		global $wpdb;
		$verify = $wpdb->get_var( $wpdb->prepare( 'SELECT student_id FROM  ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE student_id IS NULL AND code LIKE %s AND code_status = %s', $code, SharedFunctions::$available_status ) );

		if ( $verify ) {
			return true;
		}

		return false;
	}

	/**
	 * @param null $code
	 *
	 * @return bool|mixed
	 */
	public function ld_group_id_from_code( $code = null ) {
		if ( empty( $code ) ) {
			return false;
		}

		global $wpdb;

		return $wpdb->get_var(
			$wpdb->prepare(
				'SELECT g.ld_group_id FROM  ' . $wpdb->prefix . ulgm()->db->tbl_group_details . ' g
					LEFT JOIN ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' gc
					ON g.ID = gc.group_id
					WHERE `code` LIKE %s',
				$code
			)
		);
	}

	/**
	 * @param null $order_id
	 *
	 * @return int|null
	 */
	public function ld_group_id_from_order_id( $order_id = null ) {
		if ( null === $order_id ) {
			return null;
		}

		global $wpdb;

		return $wpdb->get_var(
			$wpdb->prepare(
				'SELECT ld_group_id FROM  ' . $wpdb->prefix . ulgm()->db->tbl_group_details . ' WHERE order_id=%d',
				$order_id
			)
		);
	}

	/**
	 * @param $ld_group_id
	 *
	 * @return int
	 */
	public function count_users_enrolled_in_group( $ld_group_id ) {
		$users = learndash_get_groups_users( $ld_group_id, true );
		if ( SharedFunctions::is_a_parent_group( $ld_group_id ) && SharedFunctions::is_pool_seats_enabled_for_current_parent_group( $ld_group_id, false ) ) {
			$group_children = learndash_get_group_children( $ld_group_id );
			$children_users = array();
			if ( ! empty( $group_children ) ) {
				foreach ( $group_children as $child_group_id ) {
					$children_users = array_merge( $children_users, learndash_get_groups_users( $child_group_id, true ) );
				}
			}
			$users = array_merge( $children_users, $users );
		}
		$user_ids = array_unique( array_column( $users, 'ID' ) );

		return absint( count( $user_ids ) );
	}

	/**
	 * @param $user_id
	 * @param $ld_group_id
	 *
	 * @return bool
	 */
	public function set_user_to_group( $user_id, $ld_group_id ) {
		if ( empty( $user_id ) || empty( $ld_group_id ) ) {
			return false;
		}

		ld_update_group_access( $user_id, $ld_group_id );
		$transient_key = "learndash_user_groups_{$user_id}";
		delete_transient( $transient_key );
		do_action( 'ulgm_user_added_to_group', $user_id, $ld_group_id );
	}

	/**
	 * @param        $user_id
	 * @param        $code
	 * @param string $code_status
	 *
	 * @return bool
	 */
	public function set_user_to_code( $user_id, $code, $code_status = '' ) {
		if ( empty( $code_status ) ) {
			$code_status = SharedFunctions::$redeem_status;
		}
		if ( empty( $user_id ) || empty( $code ) ) {
			return false;
		}

		global $wpdb;
		$success = false;
		$code    = trim( esc_attr( $code ) );
		$user_id = absint( $user_id );
		if ( null !== $code_status ) {
			$success = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array(
					'code_status' => $code_status,
					'student_id'  => $user_id,
					'used_date'   => current_time( 'mysql' ),
				),
				array( 'code' => $code ),
				array( '%s', '%d', '%s' ),
				array( '%s' )
			);
		}

		do_action( 'ulgm_user_redeemed_key', $user_id, $code, $code_status );

		return $success;
	}

	/**
	 * @param array $data
	 *
	 * @return bool|null
	 */
	public function set_sign_up_code_status( $data = array() ) {
		$code        = $data['code'];
		$user_id     = $data['user_id'];
		$code_status = $data['code_status'];
		$user_email  = isset( $data['user_email'] ) ? $data['user_email'] : '';
		$first_name  = isset( $data['first_name'] ) ? $data['first_name'] : '';
		$last_name   = isset( $data['last_name'] ) ? $data['last_name'] : '';
		if ( empty( $code ) || null === $code_status ) {
			return null;
		}
		$success = false;
		global $wpdb;

		if ( null !== $code_status ) {
			$update = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array( 'code_status' => $code_status ),
				array( 'code' => $code ),
				array( '%s' ),
				array( '%s' )
			);

			if ( $update ) {
				do_action( 'ulgm_key_status_changed', $code_status, $code );
				$success = true;
			} else {
				$success = false;
			}
		}

		if ( null !== $user_id ) {
			$update = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array(
					'student_id' => $user_id,
					'used_date'  => current_time( 'mysql' ),
				),
				array( 'code' => $code ),
				array( '%d', '%s' ),
				array( '%s' )
			);

			if ( $update ) {
				$success = true;
			} else {
				$success = false;
			}
		}
		if ( null !== $user_email ) {
			$update = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array( 'user_email' => $user_email ),
				array( 'code' => $code ),
				array( '%s' ),
				array( '%s' )
			);

			if ( $update ) {
				$success = true;
			} else {
				$success = false;
			}
		}
		if ( '' !== $first_name ) {
			$update = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array( 'first_name' => $first_name ),
				array( 'code' => $code ),
				array( '%s' ),
				array( '%s' )
			);

			if ( $update ) {
				$success = true;
			} else {
				$success = false;
			}
		}
		if ( '' !== $last_name ) {
			$update = $wpdb->update(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array( 'last_name' => $last_name ),
				array( 'code' => $code ),
				array( '%s' ),
				array( '%s' )
			);

			if ( $update ) {
				$success = true;
			} else {
				$success = false;
			}
		}

		if ( $success && null !== $user_id ) {
			update_user_meta( $user_id, 'uo_code_status', $code );
		}

		do_action( 'ulgm_key_status_changed', $code_status, $code );
		$success = true;

		return $success;
	}

	/**
	 * @param $code
	 * @param null $ld_group_id
	 * @param false $replace
	 * @param string $status
	 *
	 * @return null
	 */
	public function remove_sign_up_code( $code, $ld_group_id = null, $replace = false ) {
		global $wpdb;

		if ( empty( $code ) ) {
			return null;
		}
		// To avoid any warnings.
		if ( is_array( $code ) ) {
			foreach ( $code as $cc ) {
				$this->remove_sign_up_code( $cc, $ld_group_id, $replace );
			}

			//all codes dealt above; return;
			return true;
		}

		/**
		 * Decrease seat count of the group is a "Completed" status user is removed from a
		 * group and the setting is turned on
		 *
		 * @since 4.0.6
		 */
		$user_id = $this->get_user_id_from_code( $code );
		$status  = SharedFunctions::has_user_completed_all_courses_in_group( $user_id, $ld_group_id );
		if ( 'yes' === get_option( 'do_not_restore_seat_if_user_is_removed', 'no' ) && 'yes' === get_option( 'allow_to_remove_users_anytime', 'no' ) && true === $status ) {
			$replace = false;
			add_post_meta( $ld_group_id, 'user-id-removed-completed-status-' . $user_id, time() );
		}

		if ( false === $replace ) {
			$wpdb->delete(
				$wpdb->prefix . ulgm()->db->tbl_group_codes,
				array( 'code' => $code ),
				array( '%s' )
			);
			do_action( 'ulgm_seat_key_deleted', $code, $ld_group_id );

			return true;
		}
		$new_code = $this->generate_random_codes( 1 );
		if ( $new_code ) {
			$new_code = array_shift( $new_code );

			//Update to change from php null to mysql NULL
			$wpdb->query(
				$wpdb->prepare(
					'UPDATE ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . '
									SET code = %s,
										code_status = %s,
										used_date = NULL,
										student_id = NULL,
										user_email = NULL
										WHERE code = %s',
					$new_code,
					'available',
					trim( $code )
				)
			);
			do_action( 'ulgm_seat_key_replaced', $new_code, trim( $code ), $user_id, $ld_group_id );

			return true;
		}

		return null;
	}


	/**
	 * @param $user_id
	 * @param $group_id
	 *
	 * @return bool|null
	 */
	public function redeem_all_pending_group_codes( $user_id, $group_id ) {

		if ( empty( trim( $group_id ) ) || is_null( trim( $group_id ) ) ) {
			return null;
		}

		if ( ! is_numeric( trim( $group_id ) ) ) {
			return null;
		}

		global $wpdb;

		$time  = current_time( 'mysql' );
		$table = $wpdb->prefix . ulgm()->db->tbl_group_codes;
		$query = $wpdb->prepare( "UPDATE $table SET code_status = %s, used_date = %s WHERE student_id = %d AND code_status = %s AND group_id = %d", SharedFunctions::$redeem_status, "$time", $user_id, SharedFunctions::$not_redeemed_status, $group_id );

		$wpdb->query( $query );

		update_user_meta( $user_id, 'uo_code_status', SharedFunctions::$redeem_status );

		return true;
	}

	/**
	 * @param $user_id
	 * @param $ld_group_id
	 *
	 * @return string|false
	 */
	public function is_user_already_member_of_group( $user_id, $ld_group_id ) {
		$codes_group_id = $this->seat->get_code_group_id( $ld_group_id );
		if ( empty( $codes_group_id ) ) {
			return false;
		}
		global $wpdb;
		$group_codes_tbl = ulgm()->db->tbl_group_codes;
		$code_data       = $wpdb->get_var( $wpdb->prepare( "SELECT `code` FROM {$wpdb->prefix}{$group_codes_tbl} WHERE group_id = %d AND student_id = %d", $codes_group_id, $user_id ) );
		if ( $code_data ) {
			return 'yes';
		}

		return 'no';
	}

	/**
	 * @param $key
	 *
	 * @return array|string[]
	 */
	public function is_key_available( $key ) {
		global $wpdb;
		//Sanitize and trim white spaces
		$key = trim( esc_attr( $key ) );
		//Modifying logic here to be able to use 1 coupon maximum times!
		$results = $wpdb->get_row(
			$wpdb->prepare(
				"SELECT gd.ld_group_id, gc.*
				    FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . " gc
					LEFT JOIN $wpdb->prefix" . ulgm()->db->tbl_group_details . ' gd
					ON gc.group_id = gd.ID
					WHERE gc.code LIKE %s',
				$key
			)
		);
		if ( ! $results ) {
			return array(
				'result' => 'failed',
				'error'  => 'invalid',
			);
		}

		$code_id       = $results->ID;
		$student_id    = $results->student_id;
		$ld_group_id   = $results->ld_group_id;
		$code_group_id = $results->group_id;
		$code_status   = $results->code_status;

		if ( 0 === (int) $this->seat->remaining_seats( $ld_group_id ) && SharedFunctions::$not_redeemed_status !== (string) $code_status ) {
			return array(
				'result' => 'failed',
				'error'  => 'seat_not_available',
			);
		}

		if ( ! empty( $student_id ) && is_numeric( $student_id ) ) {
			return array(
				'result' => 'failed',
				'error'  => 'existing',
			);
		}

		return array(
			'result'      => 'success',
			'code_id'     => $code_id,
			'ld_group_id' => $ld_group_id,
			'group_id'    => $code_group_id,
			'key'         => $key,
		);

	}

	/**
	 * Return the code data for a user with a group
	 *
	 * @param $user_id
	 * @param $group_id
	 *
	 * @return mixed
	 */
	public function get_user_code( $user_id, $group_id, $return_all = false ) {

		global $wpdb;
		if ( ! is_numeric( $user_id ) ) {
			return false;
		}
		if ( ! is_numeric( $group_id ) ) {
			return false;
		}
		$limit = '';
		if ( true !== $return_all ) {
			$limit = ' LIMIT 0,1';
		}
		$code_group_id = ulgm()->group_management->seat->get_code_group_id( $group_id );

		return $wpdb->get_col(
			$wpdb->prepare(
				"SELECT c.code
FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . " c
INNER JOIN $wpdb->prefix" . ulgm()->db->tbl_group_details . " g
ON c.group_id = g.ID AND g.ID = %d
WHERE c.student_id = %d $limit",
				$code_group_id,
				$user_id
			)
		);
	}

	/**
	 * @param     $code
	 * @param     $group_id
	 * @param int $user_id
	 *
	 * @return bool|null|string
	 */
	public function get_temp_email_from_code( $code, $group_id, $user_id = 0 ) {

		global $wpdb;

		if ( 0 === absint( $user_id ) ) {
			$user_group_ids = learndash_get_administrators_group_ids( wp_get_current_user()->ID, true );
		} else {
			$user_group_ids = learndash_get_administrators_group_ids( $user_id, true );
		}

		// Does user have administrative access
		if ( ! in_array( $group_id, $user_group_ids ) ) {
			return false;
		}
		if ( empty( $code ) || empty( $group_id ) ) {
			return false;
		}

		$codes_group_id = $this->seat->get_code_group_id( $group_id );
		if ( empty( $codes_group_id ) ) {
			return false;
		}

		return $wpdb->get_var( $wpdb->prepare( 'SELECT user_email FROM ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE code LIKE %s AND group_id = %d AND code_status LIKE %s', $code, $codes_group_id, SharedFunctions::$not_redeemed_status ) );

	}

	/**
	 *
	 * @param null $group_id
	 * @param int $limit
	 * @param int $user_id
	 * @param int $order_id
	 * @param bool $is_cron
	 *
	 * @return array|bool
	 */
	public function get_sign_up_code_from_group_id( $group_id = null, $limit = 1, $user_id = 0, $order_id = 0, $is_cron = false ) {

		if ( null === $group_id ) {
			return false;
		}

		$codes_group_id = $this->seat->get_code_group_id( $group_id );
		if ( empty( $codes_group_id ) ) {
			return false;
		}

		$admin_created_group = get_post_meta( $group_id, '_ulgm_is_custom_group_created', true );

		if ( 'yes' !== $admin_created_group && 0 !== $order_id && function_exists( 'wc_get_order' ) ) {
			$order = wc_get_order( $order_id );
			if ( $order ) {
				if ( ( ! ulgm_filter_has_var( 'woocommerce-process-checkout-nonce', INPUT_POST ) || ! ulgm_filter_has_var( 'ulgm_group_name', INPUT_POST ) ) && 'completed' !== $order->get_status() ) {
					return array( 'message' => sprintf( __( 'Sorry, this groups order status is: %s. Please contact your group leader or site administrator to resolve this issue.', 'uncanny-learndash-groups' ), $order->get_status() ) );
				}
			}
		}

		global $wpdb;
		$sql = $wpdb->prepare(
			"SELECT `code`
					FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . "
					WHERE student_id IS NULL
					AND user_email IS NULL
					AND code_status LIKE %s
					AND group_id = %d
					ORDER BY RAND()
					LIMIT $limit",
			SharedFunctions::$available_status,
			$codes_group_id
		);

		$code = $wpdb->get_col( $sql );
		if ( empty( $code ) ) {
			return false;
		}

		if ( 1 !== $limit ) {
			return $code;
		}

		return array_shift( $code );
	}

	/**
	 * @param $group_id
	 *
	 * @return array|object|null
	 */
	public function get_codes_for_download_csv( $group_id ) {

		if ( empty( $group_id ) ) {
			return array();
		}

		global $wpdb;
		$user_group_ids = learndash_get_administrators_group_ids( wp_get_current_user()->ID, true );

		// Does user have administrative access
		if ( ! in_array( $group_id, $user_group_ids ) && ! current_user_can( 'manage_options' ) ) {
			return array();
		}

		return $wpdb->get_results(
			$wpdb->prepare(
				"SELECT p.post_title AS group_name, gc.code
FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . " gc
JOIN $wpdb->prefix" . ulgm()->db->tbl_group_details . " gd
ON gd.ID = gc.group_id AND gd.ld_group_id = %d
LEFT JOIN $wpdb->posts p
ON gd.ld_group_id = p.ID
WHERE student_id IS NULL AND user_email IS NULL",
				$group_id
			),
			ARRAY_A
		);
	}

	/**
	 * @param     $user_email
	 * @param     $group_id
	 * @param int $user_id
	 *
	 * @return bool|null|string
	 */
	public function get_code_from_temp_email( $user_email, $group_id, $user_id = 0 ) {

		global $wpdb;

		if ( 0 === absint( $user_id ) ) {
			$user_group_ids = learndash_get_administrators_group_ids( wp_get_current_user()->ID, true );
		} else {
			$user_group_ids = learndash_get_administrators_group_ids( $user_id, true );
		}

		// Does user have administrative access
		if ( ! in_array( $group_id, $user_group_ids ) ) {
			return false;
		}

		if ( empty( $user_email ) || empty( $group_id ) ) {
			return false;
		}

		$codes_group_id = $this->seat->get_code_group_id( $group_id );

		return $wpdb->get_var( $wpdb->prepare( 'SELECT code FROM ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE user_email LIKE %s AND group_id = %d AND code_status LIKE %s', $user_email, $codes_group_id, SharedFunctions::$not_redeemed_status ) );
	}


	/**
	 * @param null $group_id
	 * @param string $user_email
	 *
	 * @return false|string|null|array
	 */
	public function check_sign_up_code_from_group_id( $group_id = null, $user_email = '' ) {

		$codes_group_id = $this->seat->get_code_group_id( $group_id );
		if ( empty( $codes_group_id ) ) {
			return false;
		}

		$order_id            = $this->get_order_id_from_group_id( $group_id, 'any' );
		$admin_created_group = get_post_meta( $group_id, '_ulgm_is_custom_group_created', true );

		if ( ! $order_id ) {
			return false;
		}

		if ( 'yes' !== $admin_created_group && function_exists( 'wc_get_order' ) ) {
			$order = wc_get_order( $order_id );
			if ( $order ) {
				if ( ( ! ulgm_filter_has_var( 'woocommerce-process-checkout-nonce', INPUT_POST ) || ! ulgm_filter_has_var( 'ulgm_group_name', INPUT_POST ) ) && 'completed' !== $order->get_status() ) {
					return array( 'message' => sprintf( __( 'Sorry, this groups order status is: %s. Please contact your group leader or site administrator to resolve this issue.', 'uncanny-learndash-groups' ), $order->get_status() ) );
				}
			}
		}

		global $wpdb;

		return $wpdb->get_var( $wpdb->prepare( "SELECT `code` FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . ' WHERE student_id IS NULL AND user_email LIKE %s AND code_status LIKE %s AND group_id=%d LIMIT %d', $user_email, SharedFunctions::$not_redeemed_status, $codes_group_id, 1 ) );
	}


	/**
	 * @param $ld_group_id
	 * @param bool $count
	 *
	 * @return array|int|object|null
	 */
	public function users_invited_in_group( $ld_group_id, $count = true ) {
		$group_id = $this->seat->get_code_group_id( $ld_group_id );

		global $wpdb;
		if ( $count ) {
			$qry = $wpdb->prepare( 'SELECT COUNT(ID) AS remaining FROM ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE student_id IS NULL AND user_email IS NOT NULL AND code_status = %s AND group_id = %d ', SharedFunctions::$not_redeemed_status, $group_id );

			$users_invited = $wpdb->get_var( $qry );

			return absint( $users_invited );
		}

		$qry = $wpdb->prepare( 'SELECT `code`, `user_email`, `first_name`, `last_name` FROM ' . $wpdb->prefix . ulgm()->db->tbl_group_codes . ' WHERE student_id IS NULL AND user_email IS NOT NULL AND code_status = %s AND group_id = %d', SharedFunctions::$not_redeemed_status, $group_id );

		return $wpdb->get_results( $qry );

	}

	/**
	 * @param $code
	 *
	 * @return false|string|null
	 */
	public function get_user_id_from_code( $code ) {
		if ( empty( $code ) ) {
			return false;
		}

		global $wpdb;
		$prepare = $wpdb->prepare( "SELECT student_id FROM $wpdb->prefix" . ulgm()->db->tbl_group_codes . ' WHERE code = %s', $code );

		return $wpdb->get_var( $prepare );
	}

	/**
	 * @param $code_group_id
	 *
	 * @return string|null
	 */
	public function ld_group_id_from_code_group_id( $code_group_id = null ) {
		if ( null === $code_group_id ) {
			return null;
		}

		global $wpdb;

		return $wpdb->get_var( $wpdb->prepare( "SELECT ld_group_id FROM {$wpdb->prefix}" . ulgm()->db->tbl_group_details . ' WHERE ID=%d', $code_group_id ) );
	}
}
