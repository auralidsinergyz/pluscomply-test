<?php

namespace uncanny_learndash_groups;

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

/**
 * Class SharedFunctions
 *
 * @package uncanny_learndash_groups
 */
class SharedFunctions {

	/**
	 * We are run ctype_alnum() as a check on codes. Do not add special
	 * characters.
	 *
	 * @var string
	 */
	static $chars = '123456789ABCDEFGHJKMNPQRSTUVWXTZabcdefghjkmnopqrstuvwxyz';
	/**
	 * @var string
	 */
	static $code_group_id_meta_key = '_ulgm_code_group_id';
	/**
	 * @var string
	 */
	static $code_group_downgraded = '_ulgm_is_downgraded';
	/**
	 * @var string
	 */
	static $license_meta_field = '_ulgm_license';
	/**
	 * @var string
	 */
	static $group_name_field = '_ulgm_group_name';
	/**
	 * @var string
	 */
	static $course_meta_field = '_ulgm_course';
	/**
	 * @var string
	 */
	static $db_group_tbl = 'ulgm_group_details';
	/**
	 * @var string
	 */
	static $db_group_codes_tbl = 'ulgm_group_codes';
	/**
	 * @var string
	 */
	static $linked_group_id_meta = '_ulgm_linked_group_id';
	/**
	 * @var string
	 */
	static $bulk_discount_options = '_ulgm_bulk_discount';
	/**
	 * @var bool|int
	 */
	static $group_management_page_id = false;
	/**
	 * @var bool|int
	 */
	static $group_report_page_id = false;
	/**
	 * @var bool|int
	 */
	static $group_quiz_report_page_id = false;
	/**
	 * @var bool|int
	 */
	static $group_manage_progress_report_page_id = false;
	/**
	 * @var bool|int
	 */
	static $group_assignment_report_page_id = false;
	/**
	 * @var bool|int
	 */
	static $group_essay_report_page_id = false;
	/**
	 * @var bool|int
	 */
	static $buy_courses_page_id = false;

	/**
	 * @var array
	 */
	static $order_ids_from_group_id = array();
	/**
	 * @var array
	 */
	static $admin_created_groups = array();
	/**
	 * @var array
	 */
	static $codes_group_ids = array();
	/**
	 * @var array
	 */
	static $user_code_data = array();

	/**
	 * @var string
	 */
	static $not_redeemed_status = 'not redeemed';
	/**
	 * @var string
	 */
	static $redeem_status = 'redeemed';
	/**
	 * @var string
	 */
	static $available_status = 'available';
	/**
	 * @var string
	 */
	static $not_started_status;

	/**
	 * SharedFunctions constructor.
	 */
	public function __construct() {
		self::$not_started_status = __( 'Not Started', 'uncanny-learndash-groups' );
	}

	/**
	 * Total amount of seats left
	 *
	 * @param int $ld_group_id
	 *
	 * @return int $total_seats
	 */
	public static function total_seats( $ld_group_id ) {

		return ulgm()->group_management->seat->total_seats( $ld_group_id );
	}

	/**
	 * @param $ld_group_id
	 *
	 * @return int
	 */
	public static function users_enrolled_in_group( $ld_group_id ) {

		return ulgm()->group_management->count_users_enrolled_in_group( $ld_group_id );
	}

	/**
	 * Total amount of seats left
	 *
	 * @param int $ld_group_id
	 *
	 * @return int $seats_remaining
	 */
	public static function remaining_seats( $ld_group_id ) {

		return ulgm()->group_management->seat->remaining_seats( $ld_group_id );
	}

	/**
	 * @param $ld_group_id
	 *
	 * @return int
	 */
	public static function users_invited_in_group( $ld_group_id ) {

		return ulgm()->group_management->users_invited_in_group( $ld_group_id );
	}

	/**
	 * @param $ld_group_id
	 *
	 * @return string|null
	 */
	public static function get_group_id_by_ld_group_id( $ld_group_id ) {

		return ulgm()->group_management->seat->get_code_group_id( $ld_group_id );
	}

	/**
	 * @param $qty
	 *
	 * @return array
	 * @since 1.0
	 * @version 4.0 Dropped DB check calls since the string is always going to
	 *     be unique
	 * @deprecated 4.0
	 */
	public static function generate_random_codes( $qty ) {

		return ulgm()->group_management->generate_random_codes( $qty );
	}

	/**
	 * @return string
	 * @since 1.0
	 * @version 4.0 random string is now generated by wp_create_nonce()
	 */
	public static function random_string() {

		return ulgm()->group_management->random_string();
	}

	/**
	 * Total amount of available seats
	 *
	 * @param int $group_id
	 *
	 * @return int $available_seats
	 */
	public static function available_seats( $group_id ) {

		return ulgm()->group_management->seat->available_seats( $group_id );
	}

	/**
	 * @param null $group_id
	 *
	 * @return array
	 */
	public static function get_product_id_from_group_id( $group_id = null ) {

		return ulgm()->group_management->woocommerce->get_product_id_from_group_id( $group_id );
	}

	/**
	 * @param      $group_id
	 *
	 * @param null $product_id
	 *
	 * @return array|bool
	 */
	public static function get_group_leader_all_orders( $group_id, $product_id = null ) {

		return ulgm()->group_management->woocommerce->get_group_leader_all_orders( $group_id, $product_id );
	}

	/**
	 *
	 * @param null $group_id
	 * @param int $limit
	 *
	 * @param int $user_id
	 * @param int $order_id
	 *
	 * @param bool $is_cron
	 *
	 * @return array|bool
	 */
	public static function get_sign_up_code_from_group_id( $group_id = null, $limit = 1, $user_id = 0, $order_id = 0, $is_cron = false ) {

		return ulgm()->group_management->get_sign_up_code_from_group_id( $group_id, $limit, $user_id, $order_id, $is_cron );
	}

	/**
	 *
	 * @param null $group_id
	 * @param int $user_email
	 *
	 * @return array|bool
	 */
	public static function check_sign_up_code_from_group_id( $group_id = null, $user_email = '' ) {

		return ulgm()->group_management->check_sign_up_code_from_group_id( $group_id, $user_email );
	}

	/**
	 * @param $group_id
	 *
	 * @return array|bool|null|object
	 */
	public static function get_codes_for_download_csv( $group_id ) {

		return ulgm()->group_management->get_codes_for_download_csv( $group_id );
	}

	/**
	 * @param null $group_id
	 * @param string $status
	 *
	 * @return bool|int|mixed|string|\WP_Post|null
	 */
	public static function get_order_id_from_group_id( $group_id = null, $status = 'wc-completed' ) {

		return ulgm()->group_management->get_order_id_from_group_id( $group_id, $status );
	}

	/**
	 * @param null $code
	 *
	 * @return bool
	 */
	public static function sign_up_code_available( $code = null ) {

		return ulgm()->group_management->sign_up_code_available( $code );
	}

	/**
	 * @param null $code
	 *
	 * @return bool|mixed
	 */
	public static function get_group_id_from_code( $code = null ) {

		return ulgm()->group_management->ld_group_id_from_code( $code );
	}

	/**
	 * @param null $order_id
	 *
	 * @return int|null
	 */
	public static function get_ld_group_id_from_order_id( $order_id = null ) {

		return ulgm()->group_management->ld_group_id_from_order_id( $order_id );
	}

	/**
	 * @param $code
	 *
	 * @return bool|mixed
	 * @internal param $order_id
	 * @internal param $user_id
	 *
	 * @internal param null $code
	 */
	public static function get_codes_group_id_from_code( $code ) {

		return ulgm()->group_management->get_codes_group_id_from_code( $code );
	}

	/**
	 * Get the page id of the report page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_report_page_id( $url = false ) {
		self::$group_report_page_id = ulgm()->group_management->pages->get_group_report_page_id( $url );

		// Return ID
		return self::$group_report_page_id;
	}

	/**
	 * Get the page id of the quiz report page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_quiz_report_page_id( $url = false ) {
		self::$group_quiz_report_page_id = ulgm()->group_management->pages->get_group_quiz_report_page_id( $url );

		// Return ID
		return self::$group_quiz_report_page_id;
	}

	/**
	 * Get the page id of the quiz report page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_manage_progress_report_page_id( $url = false ) {
		self::$group_manage_progress_report_page_id = ulgm()->group_management->pages->get_group_manage_progress_report_page_id( $url );

		// Return ID
		return self::$group_manage_progress_report_page_id;
	}

	/**
	 * Get the page id of the Assignment report page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_assignment_report_page_id( $url = false ) {
		self::$group_assignment_report_page_id = ulgm()->group_management->pages->get_group_assignment_report_page_id( $url );

		// Return ID
		return self::$group_assignment_report_page_id;
	}

	/**
	 * Get the page id of the Essay report page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_essay_report_page_id( $url = false ) {
		self::$group_essay_report_page_id = ulgm()->group_management->pages->get_group_essay_report_page_id( $url );

		// Return ID
		return self::$group_essay_report_page_id;
	}

	/**
	 * Get the page id of the buy courses page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_buy_courses_page_id( $url = false ) {
		self::$buy_courses_page_id = ulgm()->group_management->pages->get_buy_courses_page_id( $url );

		// Return ID
		return self::$buy_courses_page_id;
	}

	/**
	 * Get the page id of the group management page
	 *
	 * @param bool $url Return url of page
	 *
	 * @return int/string Page ID or the URL
	 */
	public static function get_group_management_page_id( $url = false ) {
		self::$group_management_page_id = ulgm()->group_management->pages->get_group_management_page_id( $url );

		// Return ID
		return self::$group_management_page_id;
	}

	/**
	 * Get the add to cart link for extra seats in a group
	 *
	 * @param int $group_id
	 * @param int $amount_seats
	 *
	 * @return string $link Link to add seats to cart
	 */
	public static function add_group_seats_link( $group_id, $amount_seats ) {

		$site       = site_url();
		$query_args = array(
			'modify-group'    => 'true',
			'modify-group-id' => $group_id,
			'new-qty'         => $amount_seats,
		);

		if ( defined( 'WPML_PLUGIN_BASENAME' ) ) {
			$language_negotiation_type = (int) apply_filters( 'wpml_setting', false, 'language_negotiation_type' );
			$lang_code                 = apply_filters( 'wpml_current_language', null );

			if ( ! empty( $lang_code ) ) {
				if ( 1 === $language_negotiation_type ) {
					$site .= '/' . $lang_code;
				} elseif ( 3 === $language_negotiation_type ) {
					$query_args['lang'] = $lang_code;
				}
			}
		}

		return add_query_arg( $query_args, $site );
	}

	/**
	 * Get the add to cart link for extra seats in a group
	 *
	 * @param int $group_id
	 *
	 * @return string $link Link to add seats to cart
	 * @internal param int $amount_seats
	 */
	public static function add_buy_courses_link( $group_id ) {

		return ulgm()->group_management->pages->add_buy_courses_link( $group_id );

	}

	/**
	 * @param        $code
	 * @param null $user_id
	 * @param null $order_id
	 * @param null $code_status available || pending || redeemed
	 *
	 * @param null $group_id
	 * @param null $user_email
	 * @param string $first_name
	 * @param string $last_name
	 *
	 * @return null
	 */
	public static function set_sign_up_code_status( $code, $user_id = null, $order_id = null, $code_status = null, $group_id = null, $user_email = null, $first_name = '', $last_name = '' ) {
		$data = array(
			'code'        => $code,
			'user_id'     => $user_id,
			'order_id'    => $order_id,
			'code_status' => $code_status,
			'group_id'    => $group_id,
			'user_email'  => $user_email,
			'first_name'  => $first_name,
			'last_name'   => $last_name,
		);

		return ulgm()->group_management->set_sign_up_code_status( $data );
	}

	/**
	 * @param $user_id
	 * @param $group_id
	 */
	public static function redeem_all_pending_group_codes( $user_id, $group_id ) {

		return ulgm()->group_management->redeem_all_pending_group_codes( $user_id, $group_id );
	}

	/**
	 * @param      $code
	 * @param null $ld_group_id
	 * @param bool $replace
	 * @param string $status
	 *
	 * @return null
	 * @deprecated v4.0.6
	 */
	public static function remove_sign_up_code( $code, $ld_group_id = null, $replace = false ) {

		return ulgm()->group_management->remove_sign_up_code( $code, $ld_group_id, $replace );
	}

	/**
	 * Return the code data for a user with a group
	 *
	 * @param $user_id
	 * @param $group_id
	 *
	 * @return mixed
	 */
	public static function get_user_code( $user_id, $group_id, $return_all = false ) {

		return ulgm()->group_management->get_user_code( $user_id, $group_id, $return_all );
	}

	/**
	 * @param string $all
	 * @param null $cache
	 * @param null $user_id
	 */
	public static function remove_transient_cache( $all = 'no', $cache = null, $user_id = null ) {
		if ( null === $user_id ) {
			$user_id = wp_get_current_user()->ID;
		}

		if ( 'no' === $all ) {
			$cache = str_replace( 'USERID', $user_id, $cache );
			delete_option( $cache );
			delete_transient( $cache );
			delete_site_option( $cache );
		} elseif ( 'yes' === $all ) {
			delete_option( '_ulgm_user_buy_courses_' . $user_id . '_order' );
			delete_option( '_ulgm_user_' . $user_id . '_order' );
			delete_transient( '_ulgm_user_buy_courses_' . $user_id . '_order' );
			delete_transient( '_ulgm_user_' . $user_id . '_order' );
			delete_site_option( '_ulgm_user_' . $user_id . '_order' );
			delete_site_option( '_ulgm_user_buy_courses_' . $user_id . '_order' );
		}
	}

	/**
	 * @param       $cache
	 * @param array $data
	 * @param null $user_id
	 */
	public static function set_transient_cache( $cache, $data = array(), $user_id = null ) {
		if ( null === $user_id ) {
			$user_id = wp_get_current_user()->ID;
		}
		$cache = str_replace( 'USERID', $user_id, $cache );
		if ( is_multisite() ) {
			add_site_option( $cache, $data );
		} else {
			add_option( $cache, $data );
		}
	}

	/**
	 * @param null $cache
	 * @param null $user_id
	 * @param bool $is_transient
	 *
	 * @return false|mixed|void
	 */
	public static function get_transient_cache( $cache = null, $user_id = null, $is_transient = false ) {
		if ( null === $user_id ) {
			$user_id = wp_get_current_user()->ID;
		}
		$cache = str_replace( 'USERID', $user_id, $cache );

		if ( version_compare( UNCANNY_GROUPS_VERSION, '3.7.3', '<=' ) && false === $is_transient ) {
			if ( is_multisite() ) {
				$transient = get_site_transient( $cache );
			} else {
				$transient = get_transient( $cache );
			}

			return $transient;
		}

		if ( $is_transient ) {
			if ( is_multisite() ) {
				$transient = get_site_transient( $cache );
			} else {
				$transient = get_transient( $cache );
			}

			return $transient;
		}

		if ( is_multisite() ) {
			$transient = get_site_option( $cache, false );
		} else {
			$transient = get_option( $cache, false );
		}

		return $transient;
	}

	/**
	 * @param      $product_id
	 * @param bool $return_count
	 *
	 * @return int|array
	 */
	public static function get_orders_from_product_id( $product_id, $return_count = true ) {

		return ulgm()->group_management->woocommerce->get_orders_from_product_id( $product_id, $return_count );
	}

	/**
	 * @param     $code
	 * @param     $group_id
	 * @param int $user_id
	 *
	 * @return bool|null|string
	 */
	public static function get_temp_email_from_code( $code, $group_id, $user_id = 0 ) {

		return ulgm()->group_management->get_temp_email_from_code( $code, $group_id, $user_id );
	}

	/**
	 * @param     $user_email
	 * @param     $group_id
	 * @param int $user_id
	 *
	 * @return bool|null|string
	 */
	public static function get_code_from_temp_email( $user_email, $group_id, $user_id = 0 ) {

		return ulgm()->group_management->get_code_from_temp_email( $user_email, $group_id, $user_id );
	}

	/**
	 * @param $key
	 *
	 * @return array
	 */
	public static function is_key_available( $key ) {

		return ulgm()->group_management->is_key_available( $key );
	}

	/**
	 * @param        $user_id
	 * @param        $code
	 * @param string $code_status
	 *
	 * @return bool
	 */
	public static function set_user_to_code( $user_id, $code, $code_status = '' ) {
		if ( empty( $code_status ) ) {
			$code_status = self::$redeem_status;
		}

		return ulgm()->group_management->set_user_to_code( $user_id, $code, $code_status );
	}

	/**
	 * @param $user_id
	 * @param $ld_group_id
	 *
	 * @return bool
	 */
	public static function set_user_to_group( $user_id, $ld_group_id ) {

		return ulgm()->group_management->set_user_to_group( $user_id, $ld_group_id );
	}

	/**
	 * @param $user_id
	 * @param $ld_group_id
	 *
	 * @return null|string
	 */
	public static function is_user_already_member_of_group( $user_id, $ld_group_id ) {

		return ulgm()->group_management->is_user_already_member_of_group( $user_id, $ld_group_id );
	}

	/**
	 * @param null $user_id
	 * @param null $group_id
	 */
	public static function delete_transient( $user_id = null, $group_id = null ) {
		if ( null !== $user_id ) {
			$transient_key = 'learndash_user_groups_' . $user_id;
			delete_transient( $transient_key );
		}

		if ( null !== $group_id ) {
			$transient_key = 'learndash_group_users_' . $group_id;
			delete_transient( $transient_key );
		}
	}

	/**
	 * @param int $product_id
	 * @param int $qty
	 *
	 * @return string
	 */
	public static function get_checkout_return_url( $product_id = 0, $qty = 1 ) {
		$suffix = "?add-to-cart={$product_id}&quantity={$qty}";
		if ( defined( 'EVENT_TICKETS_PLUS_FILE' ) ) {
			$url = wc_get_cart_url();
		} else {
			$url = wc_get_checkout_url();
		}

		return "{$url}{$suffix}";
	}

	/**
	 * @param $code
	 * @param $group_id
	 *
	 * @return bool|array
	 */
	public static function get_details_by_code( $code, $group_id ) {

		return ulgm()->group_management->get_details_by_code( $code, $group_id );
	}

	/**
	 * @param      $product
	 * @param bool $initial
	 *
	 * @return float|string
	 */
	public static function get_custom_product_price( $product, $initial = false ) {

		return ulgm()->group_management->woocommerce->get_custom_product_price( $product, $initial );
	}

	/**
	 * @param \WC_Product $product
	 * @param bool $initial
	 * @param int $current_price
	 *
	 * @return float|string
	 */
	public static function get_license_price( \WC_Product $product, $initial = false, $current_price = 0 ) {

		return ulgm()->group_management->woocommerce->get_license_price( $product, $initial, $current_price );
	}

	/**
	 * @param $string
	 *
	 * @return string|string[]
	 */
	public static function remove_special_character( $string, $validate_only = false ) {

		$t = $string;

		$specChars = array(
			'!'     => '',
			'"'     => '',
			'#'     => '',
			'$'     => '',
			'%'     => '',
			'&amp;' => '',
			//'\''    => '',
			'('     => '',
			')'     => '',
			'*'     => '',
			'+'     => '',
			','     => '',
			'₹'     => '',
			'.'     => '',
			'/-'    => '',
			':'     => '',
			';'     => '',
			'<'     => '',
			'='     => '',
			'>'     => '',
			'?'     => '',
			'@'     => '',
			'['     => '',
			'\\'    => '',
			']'     => '',
			'^'     => '',
			'_'     => '',
			'`'     => '',
			'{'     => '',
			'|'     => '',
			'}'     => '',
			'~'     => '',
			'-----' => '-',
			'----'  => '-',
			'---'   => '-',
			'/'     => '',
			'--'    => '-',
			'/_'    => '-',

		);

		if ( $validate_only ) {
			foreach ( $specChars as $k => $v ) {
				if ( false !== strpos( $t, $k ) ) {
					return false;
				}
			}
		}
		foreach ( $specChars as $k => $v ) {
			$t = str_replace( $k, $v, $t );
		}

		return $t;
	}

	/**
	 * @param int $count
	 *
	 * @return string
	 */
	public static function get_per_seat_text( $count = 1 ) {

		return ulgm()->group_management->seat->get_per_seat_text( $count );
	}

	/**
	 * @param $user_id
	 * @param $group_id
	 *
	 * @return string|null
	 */
	public static function check_if_user_has_code_redeemed( $user_id, $group_id ) {

		return ulgm()->group_management->seat->if_user_redeemed_code( $user_id, $group_id );
	}

	/**
	 * @param $to
	 * @param $subject
	 * @param $body
	 * @param array $headers
	 * @param array $attachment
	 *
	 * @return bool|mixed|void
	 */
	public static function wp_mail( $to, $subject, $body, $headers = array(), $attachment = array() ) {
		$body       = do_shortcode( $body );
		$subject    = do_shortcode( $subject );
		$to         = apply_filters( 'ulgm_mail_to', $to );
		$subject    = apply_filters( 'ulgm_mail_subject', html_entity_decode( $subject ) );
		$body       = apply_filters( 'ulgm_mail_body', html_entity_decode( $body ) );
		$headers    = apply_filters( 'ulgm_mail_headers', $headers );
		$attachment = apply_filters( 'ulgm_mail_attachment', $attachment );

		return wp_mail( $to, $subject, $body, $headers, $attachment );
	}

	/**
	 * @param $product
	 *
	 * @return bool
	 */
	public static function is_group_licensed_product( $product ) {
		if ( ! $product instanceof \WC_Product ) {
			return $product;
		}

		if ( $product->is_type( 'license' ) ) {
			return true;
		}

		if ( class_exists( '\uncanny_learndash_groups\WoocommerceLicenseSubscription' ) && \WC_Subscriptions_Product::is_subscription( $product ) ) {
			$courses = get_post_meta( $product->get_id(), self::$license_meta_field, true );
			if ( ! empty( $courses ) ) {
				return true;
			}
		}

		return false;
	}

	/**
	 * @param int $length
	 * @param false $special_chars
	 * @param false $extra_special_chars
	 *
	 * @return mixed|void
	 */
	public static function wp_generate_password( $length = 8, $special_chars = false, $extra_special_chars = false ) {
		$length              = apply_filters( 'ulgm_password_length', $length );
		$special_chars       = apply_filters( 'ulgm_password_special_chars', $special_chars );
		$extra_special_chars = apply_filters( 'ulgm_password_extra_special_chars', $extra_special_chars );

		return wp_generate_password( $length, $special_chars, $extra_special_chars );
	}

	/**
	 * @param $code_details
	 *
	 * @return array|bool[]
	 */
	public static function validate_key_results( $code_details ) {
		if ( is_array( $code_details ) ) {
			if ( 'failed' === $code_details['result'] ) {
				if ( 'invalid' === $code_details['error'] ) {
					return array(
						'is_valid' => false,
						'message'  => Config::$invalid_code,
					);

				} elseif ( 'existing' === $code_details['error'] ) {
					return array(
						'is_valid' => false,
						'message'  => Config::$already_redeemed,
					);
				}
			} elseif ( 'success' === $code_details['result'] ) {
				return array( 'is_valid' => true );
			}
		} else {
			//$this->ulgm_registration_errors()->add( 'code_invalid', Config::$invalid_code );
			return array(
				'is_valid' => false,
				'message'  => Config::$invalid_code,
			);
		}
	}

	/**
	 * @param $group_id
	 *
	 * @return bool
	 */
	public static function is_license_exists( $group_id ) {
		if ( false === Utilities::if_woocommerce_active() ) {
			return false;
		}

		$code_group_id = ulgm()->group_management->seat->get_code_group_id( $group_id );
		if ( empty( $code_group_id ) ) {
			return false;
		}

		$order_id = ulgm()->group_management->get_order_id_from_group_id( $group_id );
		if ( empty( $order_id ) ) {
			return false;
		}

		$order = wc_get_order( $order_id );
		if ( ! $order instanceof \WC_Order ) {
			return false;
		}
		$exists = false;
		/**
		 * @var \WC_Order_Item_Product $item
		 */
		foreach ( $order->get_items() as $item ) {
			$product = $item->get_product();
			if ( ! self::is_group_licensed_product( $product ) ) {
				continue;
			}
			if ( 'publish' !== $product->get_status() ) {
				continue;
			}
			$exists = true;
		}

		return $exists;
	}

	/**
	 * @param $group_id
	 *
	 * @return bool
	 */
	public static function is_basic_group( $group_id ) {
		$code_group_id = ulgm()->group_management->seat->get_code_group_id( $group_id );
		$total_seats   = ulgm()->group_management->seat->total_seats( $group_id );
		if ( 0 === $total_seats && empty( $code_group_id ) ) {
			return true;
		}

		return false;
	}

	/**
	 * @param $user_id
	 * @param null $group_id
	 *
	 * @return string|void
	 */
	public static function get_user_current_progress_in_group( $user_id, $group_id = null ) {
		$current_user_groups = learndash_get_users_group_ids( $user_id );

		if ( ( $key = array_search( (string) $group_id, $current_user_groups ) ) !== false ) {
			unset( $current_user_groups[ $key ] );
		}

		$learndash_group_enrolled_courses = LearndashFunctionOverrides::learndash_group_enrolled_courses( $group_id );

		// Default is not completed
		$completed = false;

		// Default progress
		$in_progress = false;

		// Check group progress courses
		foreach ( $learndash_group_enrolled_courses as $course_id ) {
			$course_progress = learndash_course_progress(
				array(
					'course_id' => $course_id,
					'user_id'   => $user_id,
					'array'     => true,
				)
			);
			// does the groups course and user progress
			if ( empty( $course_progress ) || ! is_array( $course_progress ) || ( is_array( $course_progress ) && 0 === (int) $course_progress['completed'] && 0 === (int) $course_progress['percentage'] ) ) {
				$in_progress = false;
				$completed   = false;
			} elseif ( is_array( $course_progress ) && (int) $course_progress['completed'] === (int) $course_progress['total'] ) {
				$completed = true;
			} elseif ( is_array( $course_progress ) && (int) $course_progress['total'] !== (int) $course_progress['completed'] ) {
				$in_progress = true;
				$completed   = false;
				break;
			}
		}

		// Set Status
		if ( $completed ) {
			$status = __( 'Completed', 'uncanny-learndash-groups' );
		} elseif ( $in_progress ) {
			$status = __( 'In Progress', 'uncanny-learndash-groups' );
		} else {
			$status = self::$not_started_status;
		}

		return $status;
	}

	/**
	 * @param $user_id
	 * @param null $group_id
	 *
	 * @return string|void
	 */
	public static function has_user_completed_all_courses_in_group( $user_id, $group_id = null ) {
		$current_user_groups = learndash_get_users_group_ids( $user_id );

		if ( ( $key = array_search( (string) $group_id, $current_user_groups ) ) !== false ) {
			unset( $current_user_groups[ $key ] );
		}

		$learndash_group_enrolled_courses = LearndashFunctionOverrides::learndash_group_enrolled_courses( $group_id );

		// Default is not completed
		$completed = false;

		// Check group progress courses
		foreach ( $learndash_group_enrolled_courses as $course_id ) {
			$course_progress = learndash_course_progress(
				array(
					'course_id' => $course_id,
					'user_id'   => $user_id,
					'array'     => true,
				)
			);
			// does the groups course and user progress
			if ( empty( $course_progress ) || ! is_array( $course_progress ) || ( is_array( $course_progress ) && 0 === (int) $course_progress['completed'] && 0 === (int) $course_progress['percentage'] ) ) {
				$in_progress = false;
				$completed   = false;
			} elseif ( is_array( $course_progress ) && (int) $course_progress['completed'] === (int) $course_progress['total'] ) {
				$completed = true;
			} elseif ( is_array( $course_progress ) && (int) $course_progress['total'] !== (int) $course_progress['completed'] ) {
				$in_progress = true;
				$completed   = false;
				break;
			}
		}

		return $completed;
	}

	/**
	 * @param $group_id
	 *
	 * @return mixed|string|void
	 */
	public static function ulgm_group_management_email_users_from_name( $group_id = null ) {
		$from_name = get_option( 'ulgm_name_from', '' );

		$return = ! empty( $from_name ) ? $from_name : get_bloginfo( 'name' );

		return apply_filters(
			'ulgm_group_management_email_users_from_name',
			$return,
			$group_id
		);
	}

	/**
	 * @param $group_id
	 *
	 * @return mixed|string|void
	 */
	public static function ulgm_group_management_email_users_from_email( $group_id = null ) {
		$from_email = get_option( 'ulgm_email_from', '' );

		$return = ! empty( $from_email ) ? $from_email : get_bloginfo( 'admin_email' );

		return apply_filters(
			'ulgm_group_management_email_users_from_email',
			$return,
			$group_id
		);
	}

	/**
	 * @param $group_id
	 *
	 * @return mixed|string|void
	 */
	public static function ulgm_group_management_email_users_reply_to( $group_id = null ) {
		$reply_to = get_option( 'ulgm_reply_to', '' );

		$return = ! empty( $reply_to ) ? $reply_to : get_bloginfo( 'admin_email' );

		return apply_filters(
			'ulgm_group_management_email_users_reply_to',
			$return,
			$group_id
		);
	}


	/**
	 * @return bool
	 */
	public static function is_pool_seats_enabled_for_all_groups() {
		// check if LD hierarchy is function is available
		if ( ! function_exists( 'learndash_is_groups_hierarchical_enabled' ) ) {
			return false;
		}
		// Check if pool seats enabled
		//      if ( ! self::is_pool_seats_enabled() ) {
		//          return false;
		//      }
		// check if hierarchy is active
		if ( ! learndash_is_groups_hierarchical_enabled() ) {
			return false;
		}
		// check if hierarchy in groups is active
		//      if ( ! self::is_hierarchy_enabled() ) {
		//          return false;
		//      }

		return 'yes' === get_option( 'ld_pool_seats_all_groups', 'no' ) ? true : false;
	}


	/**
	 * @param $group_id
	 * @param bool $check_parent
	 *
	 * @return bool
	 */
	public static function is_pool_seats_enabled_for_current_parent_group( $group_id, $check_parent = true ) {
		// if enabled for all!
		if ( self::is_pool_seats_enabled_for_all_groups() ) {
			return true;
		}
		// check if LD hierarchy is function is available
		if ( ! function_exists( 'learndash_is_groups_hierarchical_enabled' ) ) {
			return false;
		}
		// Check if pool seats enabled
		if ( ! self::is_pool_seats_enabled() ) {
			return false;
		}
		// check if hierarchy is active
		if ( ! learndash_is_groups_hierarchical_enabled() ) {
			return false;
		}
		if ( ! self::is_a_parent_group( $group_id ) && true === $check_parent ) {
			$group_id = ulgm()->group_management->seat->get_real_ld_group_id( $group_id );
		}
		// check if hierarchy in groups is active
		//      if ( ! self::is_hierarchy_enabled( $group_id ) ) {
		//          return false;
		//      }

		return 1 === absint( get_post_meta( $group_id, 'ulgm_pool_seats_active', true ) ) ? true : false;
	}


	/**
	 * @param $group_id
	 *
	 * @return bool
	 */
	public static function is_a_parent_group( $group_id ) {
		if ( 0 === (int) wp_get_post_parent_id( $group_id ) ) {
			return true;
		}

		return false;
	}

	/**
	 * @param $group_id
	 *
	 * @return bool
	 */
	public static function has_children_in_group( $group_id ) {
		$child_groups = learndash_get_group_children( $group_id );
		if ( empty( $child_groups ) ) {
			return false;
		}

		return true;
	}

	/**
	 * @param $ld_group_id
	 *
	 * @return bool|mixed|void
	 */
	public static function is_hierarchy_enabled( $ld_group_id = null ) {
		$is_hierarchy_setting_enabled = false;
		// check if hierarchy in groups is active
		if ( 'yes' === get_option( 'ld_hierarchy_settings_child_groups', 'no' ) ) {
			$is_hierarchy_setting_enabled = true;
		}

		return apply_filters(
			'ulgm_is_hierarchy_setting_enabled',
			$is_hierarchy_setting_enabled,
			$ld_group_id,
			false,
			false
		);
	}

	/**
	 * @return bool
	 */
	public static function is_pool_seats_enabled() {
		return 'yes' === get_option( 'ld_pool_seats_in_hierarchy', 'no' ) ? true : false;
	}

	/**
	 * @param null $ld_group_id
	 * @param array $user_group_ids
	 *
	 * @return bool
	 */
	public static function can_user_manage_this_group( $group_leader_id, $ld_group_id = null, $user_group_ids = array() ) {
		// Looks like an admin
		if ( user_can( $group_leader_id, 'manage_options' ) ) {
			return apply_filters( 'ulgm_user_can_manage_this_group', true, $ld_group_id, $group_leader_id, $user_group_ids );
		}
		// Allow users to disable setting
		if ( true === apply_filters( 'ulgm_do_not_allow_parent_group_leaders_to_manage_children', false, $ld_group_id, $group_leader_id, $user_group_ids ) ) {
			$r = in_array( $ld_group_id, array_map( 'absint', $user_group_ids ), true );

			return apply_filters( 'ulgm_user_can_manage_this_group', $r, $ld_group_id, $group_leader_id, $user_group_ids );
		}
		// if null, return
		if ( null === $group_leader_id || null === $ld_group_id ) {
			return false;
		}
		// check if hierarchy is enabled
		// Enabled = move on to next logic
		// Disabled = check if group ID exists
		if ( ! self::is_hierarchy_enabled( $ld_group_id ) ) {
			$r = in_array( $ld_group_id, array_map( 'absint', $user_group_ids ), true );

			return apply_filters( 'ulgm_user_can_manage_this_group', $r, $ld_group_id, $group_leader_id, $user_group_ids );
		}

		$group_admin_ids = learndash_get_administrators_group_ids( $group_leader_id );
		if ( empty( $group_admin_ids ) ) {
			return apply_filters( 'ulgm_user_can_manage_this_group', false, $ld_group_id, $group_leader_id, $user_group_ids );
		}
		// Hierarchy is enabled, return all children groups as well
		$new_groups = array();
		foreach ( $group_admin_ids as $group_id ) {
			$new_groups[] = $group_id;
			$new_groups   = array_merge( $new_groups, learndash_get_group_children( $group_id ) );
		}

		$new_groups = array_map( 'absint', array_unique( $new_groups ) );
		if ( ! in_array( $ld_group_id, $new_groups, true ) ) {
			return apply_filters( 'ulgm_user_can_manage_this_group', false, $ld_group_id, $group_leader_id, $new_groups );
		}

		return apply_filters( 'ulgm_user_can_manage_this_group', true, $ld_group_id, $group_leader_id, $new_groups );
	}


	/**
	 * Load backend js if condition matches.
	 *
	 * @param $hook
	 *
	 * @return void
	 */
	public static function load_backend_bundles() {
		$current_page_requested = filter_input( INPUT_GET, 'page' );

		if ( isset( $_GET['post'] ) && isset( $_GET['action'] ) && 'edit' === $_GET['action'] && 'product' === get_post_type( absint( $_GET['post'] ) ) ) {
			return true;
		}

		return preg_match( '/uncanny(\-learndash)?\-groups(.+)?/', $current_page_requested, $matches );
	}
}
